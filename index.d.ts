/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export declare function argon2Hash(password: string): string
export declare function argon2HashThreadPool(password: string): string
export declare function argon2Verify(hashedPassword: string, passwordToVerify: string): boolean
export declare function argon2VerifyThreadpool(hashedPassword: string, passwordToVerify: string): boolean
export declare function bcryptHash(passwordToHash: string): string
export declare function bcryptHashThreadpool(passwordToHash: string): string
export declare function bcryptVerify(hashedPassword: string, passwordToVerify: string): boolean
export declare function bcryptVerifyThreadpool(passwordToHash: string, passwordToVerify: string): boolean
export declare function scryptHash(passwordToHash: string): string
export declare function scryptVerify(hashedPassword: string, passwordToVerify: string): boolean
export declare function scryptHashThreadpool(passwordToHash: string): string
export declare function scryptVerifyThreadpool(hashedPassword: string, passwordToVerify: string): boolean
export declare function sha512(dataToHash: Array<number>): Array<number>
export declare function sha512Verify(dataToHash: Array<number>, dataToVerify: Array<number>): boolean
export declare function sha256(dataToHash: Array<number>): Array<number>
export declare function sha256Verify(dataToHash: Array<number>, dataToVerify: Array<number>): boolean
export declare function x25519GenerateSecretAndPublicKey(): CASx25519SecretPublicKeyResult
export declare function x25519DiffieHellman(mySecretKey: Array<number>, usersPublicKey: Array<number>): Array<number>
export declare function aesNonce(): Array<number>
export declare function aes128Key(): Array<number>
export declare function aes256Key(): Array<number>
export declare function aes128Encrypt(aesKey: Array<number>, nonce: Array<number>, plaintext: Array<number>): Array<number>
export declare function aes128Decrypt(aesKey: Array<number>, nonce: Array<number>, ciphertext: Array<number>): Array<number>
export declare function aes256Encrypt(aesKey: Array<number>, nonce: Array<number>, plaintext: Array<number>): Array<number>
export declare function aes256Decrypt(aesKey: Array<number>, nonce: Array<number>, ciphertext: Array<number>): Array<number>
export declare function aes256KeyFromX25519SharedSecret(sharedSecret: Array<number>): CASAesKeyFromX25519SharedSecret
export declare function aes128KeyFromX25519SharedSecret(sharedSecret: Array<number>): CASAesKeyFromX25519SharedSecret
export declare function generateRsaKeys(keySize: number): CasrsaKeyPairResult
export declare function signRsa(privateKey: string, hash: Array<number>): Array<number>
export declare function verifyRsa(publicKey: string, hash: Array<number>, signature: Array<number>): boolean
export declare function sha512RsaDigitalSignature(rsaKeySize: number, dataToSign: Array<number>): CASRSADigitalSignatureResult
export declare function sha512RsaVerifyDigitalSignature(publicKey: string, dataToVerify: Array<number>, signature: Array<number>): boolean
export declare function sha256RsaDigitalSignature(rsaKeySize: number, dataToSign: Array<number>): CASRSADigitalSignatureResult
export declare function sha256RsaVerifyDigitalSignature(publicKey: string, dataToVerify: Array<number>, signature: Array<number>): boolean
export declare function sha512Ed25519DigitalSignature(dataToSign: Array<number>): CASSHAED25519DalekDigitalSignatureResult
export declare function sha512Ed25519DigitalSignatureVerify(publicKey: Array<number>, dataToVerify: Array<number>, signature: Array<number>): boolean
export declare function sha256Ed25519DigitalSignature(dataToSign: Array<number>): CASSHAED25519DalekDigitalSignatureResult
export declare function sha256Ed25519DigitalSignatureVerify(publicKey: Array<number>, dataToVerify: Array<number>, signature: Array<number>): boolean
export declare function ascon128KeyGenerate(): Array<number>
export declare function ascon128NonceGenerate(): Array<number>
export declare function ascon128Encrypt(key: Array<number>, nonce: Array<number>, plaintext: Array<number>): Array<number>
export declare function ascon128Decrypt(key: Array<number>, nonce: Array<number>, ciphertext: Array<number>): Array<number>
export declare function hmacSign(key: Array<number>, message: Array<number>): Array<number>
export declare function hmacSignThreadpool(key: Array<number>, message: Array<number>): Array<number>
export declare function hmacVerify(key: Array<number>, message: Array<number>, signature: Array<number>): boolean
export declare function hmacVerifyThreadpool(key: Array<number>, message: Array<number>, signature: Array<number>): boolean
export type CASx25519SecretPublicKeyResult = CaSx25519SecretPublicKeyResult
export declare class CaSx25519SecretPublicKeyResult {
  publicKey: Array<number>
  secretKey: Array<number>
  constructor(publicKey: Array<number>, secretKey: Array<number>)
}
export type CASAesKeyFromX25519SharedSecret = CasAesKeyFromX25519SharedSecret
export declare class CasAesKeyFromX25519SharedSecret {
  aesKey: Array<number>
  aesNonce: Array<number>
  constructor(aesKey: Array<number>, aesNonce: Array<number>)
}
export type CASRSAKeyPairResult = CasrsaKeyPairResult
export declare class CasrsaKeyPairResult {
  privateKey: string
  publicKey: string
  constructor(privateKey: string, publicKey: string)
}
export type CASSHAED25519DalekDigitalSignatureResult = Casshaed25519DalekDigitalSignatureResult
export declare class Casshaed25519DalekDigitalSignatureResult {
  publicKey: Array<number>
  signature: Array<number>
  constructor(publicKey: Array<number>, signature: Array<number>)
}
export type CASRSADigitalSignatureResult = CasrsaDigitalSignatureResult
export declare class CasrsaDigitalSignatureResult {
  publicKey: string
  privateKey: string
  signature: Array<number>
  constructor(publicKey: string, privateKey: string, signature: Array<number>)
}
